{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/post.js","filenameRelative":"/client/post.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/post.js.map","sourceFileName":"/client/post.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"post"},"ignored":false,"code":"Session.set('popup_is_open', false);\n\nTemplate.comment_template.helpers({\n    popup_is_open: function () {\n        function popup_is_open() {\n            return Session.get('popup_is_open');\n        }\n\n        return popup_is_open;\n    }(),\n\n    all_post: function () {\n        function all_post() {\n            return posts.find().map(function (post, index, cursor) {\n                var $author = Meteor.users.find(post.authorId).fetch()[0];\n                var $allComs = coms.find({ 'postId': post._id }).fetch();\n                return {\n                    message: post.message,\n                    postId: post._id,\n                    likes: post.likes,\n                    severalLikes: post.likes > 1 ? true : false,\n                    severalComments: post.comment > 1 ? true : false,\n                    comment: post.comment,\n                    createdAt: moment(post.createdAt).fromNow(),\n                    author: {\n                        name: $author.username\n                    },\n                    coms: $allComs\n                };\n            });\n        }\n\n        return all_post;\n    }()\n});\n\nTemplate.comment_template.events({\n    'click #close': function () {\n        function clickClose() {\n            Session.set('popup_is_open', false);\n        }\n\n        return clickClose;\n    }(),\n\n    'click #validate': function () {\n        function clickValidate(event, template) {\n            event.preventDefault();\n            var $message = template.find('#comment');\n            var $authorId = Meteor.userId();\n            if ($message.value !== \"\") {\n                posts.insert({\n                    message: $message.value,\n                    authorId: $authorId,\n                    likes: 0,\n                    usersWhoLiked: [],\n                    comment: 0,\n                    createdAt: new Date()\n                });\n\n                $message.value = '';\n                Session.set('popup_is_open', false);\n            }\n        }\n\n        return clickValidate;\n    }(),\n\n    'click #like': function () {\n        function clickLike(event) {\n            var $postId = event.target.dataset.id;\n            var $post = posts.find($postId).fetch()[0];\n            if ($post && $post.usersWhoLiked.indexOf(Meteor.userId()) === -1) {\n\n                var $likesUpdated = $post.likes + 1;\n                $post.usersWhoLiked.push(Meteor.userId());\n                var $usersWhoLikedUpdated = $post.usersWhoLiked;\n                posts.update({ _id: $postId }, { $set: { likes: $likesUpdated, usersWhoLiked: $usersWhoLikedUpdated } });\n            }\n        }\n\n        return clickLike;\n    }()\n});\n\nTemplate.header_template.helpers({\n    current_user: function () {\n        function current_user() {\n            var user = Meteor.users.find(Session.get('currentUserId')).fetch()[0];\n            return { name: user.username, email: user.emails[0].address };\n        }\n\n        return current_user;\n    }()\n});\n\nTemplate.header_template.events({\n    'click #logout': function () {\n        function clickLogout(event, template) {\n            Meteor.logout(function () {\n                Session.set('currentUserId', undefined);\n                Router.go('/');\n            });\n        }\n\n        return clickLogout;\n    }()\n});\n\nTemplate.add_comment_template.events({\n    'click #addComment': function () {\n        function clickAddComment() {\n            Session.set('popup_is_open', true);\n        }\n\n        return clickAddComment;\n    }()\n});","ast":null,"map":{"version":3,"sources":["/client/post.js"],"names":["Session","set","Template","comment_template","helpers","popup_is_open","get","all_post","posts","find","map","post","index","cursor","$author","Meteor","users","authorId","fetch","$allComs","coms","_id","message","postId","likes","severalLikes","severalComments","comment","createdAt","moment","fromNow","author","name","username","events","event","template","preventDefault","$message","$authorId","userId","value","insert","usersWhoLiked","Date","$postId","target","dataset","id","$post","indexOf","$likesUpdated","push","$usersWhoLikedUpdated","update","$set","header_template","current_user","user","email","emails","address","logout","undefined","Router","go","add_comment_template"],"mappings":"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","file":"/client/post.js.map","sourcesContent":["Session.set('popup_is_open', false);\r\n\r\nTemplate.comment_template.helpers\r\n(\r\n    {\r\n        popup_is_open: function(){\r\n            return Session.get('popup_is_open');\r\n        },\r\n\r\n        all_post : function ()\r\n        {\r\n            return posts.find().map\r\n            (\r\n                function( post, index, cursor )\r\n                {\r\n                    var $author = Meteor.users.find(post.authorId).fetch()[0];\r\n                    var $allComs = coms.find({'postId':post._id}).fetch();\r\n                    return {\r\n                        message : post.message,\r\n                        postId : post._id,\r\n                        likes : post.likes,\r\n                        severalLikes : ((post.likes > 1) ? true: false),\r\n                        severalComments : ((post.comment > 1) ? true: false),\r\n                        comment : post.comment,\r\n                        createdAt : moment(post.createdAt).fromNow(),\r\n                        author : {\r\n                            name : $author.username\r\n                        },\r\n                        coms : $allComs\r\n                    };\r\n                }\r\n            );\r\n        },\r\n    }\r\n);\r\n\r\nTemplate.comment_template.events({\r\n    'click #close' : function (){\r\n        Session.set('popup_is_open', false);\r\n    },\r\n\r\n    'click #validate' : function(event, template){\r\n        event.preventDefault();\r\n        var $message = template.find( '#comment');\r\n        var $authorId = Meteor.userId();\r\n        if ($message.value !== \"\"){\r\n            posts.insert({\r\n                message: $message.value,\r\n                authorId: $authorId,\r\n                likes: 0,\r\n                usersWhoLiked :[],\r\n                comment: 0,\r\n                createdAt: new Date(),\r\n            });\r\n\r\n            $message.value = '';\r\n            Session.set('popup_is_open', false);\r\n        }\r\n    },\r\n\r\n    'click #like' : function(event){\r\n        var $postId = event.target.dataset.id;\r\n        var $post = posts.find($postId).fetch()[0];\r\n        if ( $post && $post.usersWhoLiked.indexOf(Meteor.userId() ) === -1){\r\n\r\n            var $likesUpdated = $post.likes + 1;\r\n            $post.usersWhoLiked.push( Meteor.userId() );\r\n            var $usersWhoLikedUpdated = $post.usersWhoLiked;\r\n            posts.update({_id : $postId},{$set:{likes: $likesUpdated, usersWhoLiked: $usersWhoLikedUpdated }});\r\n        }\r\n    }\r\n});\r\n\r\nTemplate.header_template.helpers\r\n(\r\n    {\r\n        current_user : function ()\r\n        {\r\n            var user = Meteor.users.find(Session.get( 'currentUserId' )).fetch()[0];\r\n            return { name : user.username, email : user.emails[0].address};\r\n\r\n        }\r\n    }\r\n);\r\n\r\nTemplate.header_template.events({\r\n    'click #logout' : function (event, template){\r\n        Meteor.logout(function(){\r\n            Session.set('currentUserId', undefined);\r\n            Router.go('/');\r\n        })\r\n    }\r\n});\r\n\r\n\r\nTemplate.add_comment_template.events({\r\n    'click #addComment' : function (){\r\n        Session.set('popup_is_open', true);\r\n    }\r\n});"]},"hash":"2ffc52ab85a99056c8d9bf6e042f2f446333dcb6"}
